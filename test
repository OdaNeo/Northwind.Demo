using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TCCNextGenerationInformationSystem.Core.Interfaces.UnitOfWorks;
using TCCNextGenerationInformationSystem.Core.Interfaces.Repositories;
using TCCNextGenerationInformationSystem.Core.Repositories;
using TCCNextGenerationInformationSystem.Core.Extensions;
using TCCNextGenerationInformationSystem.Core.Helpers;

namespace TCCNextGenerationInformationSystem.DTO.UnitOfWorks
{
    public class UnitOfWork<TDbContext> : IUnitOfWork<TDbContext> where TDbContext : DbContext
    {
        private readonly TDbContext _context;
        private Hashtable _repositories;
        private IDbContextTransaction _transaction;

        public UnitOfWork(TDbContext context)
        {
            _context = Guard.Against(context);
        }

        public IRepository<TEntity> Repository<TEntity>() where TEntity : class
        {
            if (_repositories.IsNull()) _repositories = new Hashtable();

            var type = typeof(TEntity).Name;

            if (!_repositories.ContainsKey(type))
            {
                var repositoryType = typeof(Repository<TEntity, TDbContext>);
                var repositoryInstance = Activator.CreateInstance(
                    repositoryType.MakeGenericType(typeof(TEntity)), _context);

                _repositories.Add(type, repositoryInstance);
            }

            return (IRepository<TEntity>)_repositories[type];
        }

        public async Task<int> CompleteAsync()
        {
            return await _context.SaveChangesAsync();
        }

        public async Task<int> CompleteAsync(CancellationToken cancellationToken)
        {
            return await _context.SaveChangesAsync(cancellationToken);
        }

        public void BeginTransaction()
        {
            _transaction = _context.Database.BeginTransaction();
        }

        public void Rollback()
        {
            _transaction?.Rollback();
        }

        public void Commit()
        {
            try
            {
                _context.SaveChanges();
                _transaction?.Commit();
            }
            catch
            {
                _transaction?.Rollback();
                throw;
            }
        }
        public async Task CommitAsync()
        {
            try
            {
                await _context.SaveChangesAsync();
                await _transaction!.CommitAsync();
            }
            catch
            {
                await _transaction!.RollbackAsync();
                throw;
            }
        }


        public async Task BeginTransactionAsync()
        {
            _transaction = await _context.Database.BeginTransactionAsync();
        }

        public async Task BeginTransactionAsync(CancellationToken cancellationToken)
        {
            _transaction = await _context.Database.BeginTransactionAsync(cancellationToken);
        }

        public async Task RollbackAsync()
        {
            if (_transaction.IsNotNull())
            {
                await _transaction.RollbackAsync();
            }
        }

        public async Task CommitAsync(CancellationToken cancellationToken)
        {
            try
            {
                await _context.SaveChangesAsync(cancellationToken);
                if (_transaction.IsNotNull())
                {
                    await _transaction.CommitAsync(cancellationToken);
                }
            }
            catch
            {
                if (_transaction.IsNotNull())
                {
                    await _transaction.RollbackAsync(cancellationToken);
                }
                throw;
            }
        }
        public void Dispose()
        {
            _transaction?.Dispose();
            _context.Dispose();
        }

        public async ValueTask DisposeAsync()
        {
            if (_transaction.IsNotNull())
            {
                await _transaction.DisposeAsync();
            }
            await _context.DisposeAsync();
        }
    }
}
