using System;
using TCCNextGenerationInformationSystem.Core.Extensions;
using TCCNextGenerationInformationSystem.Core.Helpers;
using TCCNextGenerationInformationSystem.Core.Interfaces.Repositories;
using TCCNextGenerationInformationSystem.Core.Repositories;
using TCCNextGenerationInformationSystem.DTO.Context;
using TCCNextGenerationInformationSystem.DTO.Interfaces.Repositories;
using TCCNextGenerationInformationSystem.DTO.Models;
using TCCNextGenerationInformationSystem.DTO.Models.DTOs;

namespace TCCNextGenerationInformationSystem.DTO.Repositories
{
    public class AuthorityMasterRepository : Repository<AuthorityMasterModel, AppDbContext>, IAuthorityMasterRepository
    {
        public AuthorityMasterRepository(AppDbContext dbContext) : base(dbContext)
        {
        }

        /// <summary>
        /// 権限データ取得（ページネーション対応)
        /// </summary>
        /// <param name="searchParam">検索条件DTO</param>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async Task<PagedResult<AuthorityDataGetDTO>> GetAuthorityDataPagedAsync(AuthorityDataSearchParam searchParam, int pageNumber, int pageSize, CancellationToken cancellationToken = default)
        {
            return await this.QueryPagedAsync(
                queryBuilder => queryBuilder
                    .JoinAny<UserMasterModel>("UserId", "UserId")
                    .JoinAny<DepartmentMasterModel>("User.DepartmentCode", "DepartmentCode")
                    .WhereIf(searchParam.UserId.IsNotNullOrEnptyOrWhiteSpace(), "AuthorityMaster.UserId", searchParam.UserId)
                    .WhereIf(searchParam.UserFullName.IsNotNullOrEnptyOrWhiteSpace(), "User.UserFullName", searchParam.UserFullName)
                    .WhereIf(searchParam.DepartmentName.IsNotNullOrEnptyOrWhiteSpace(), "Department.DepartmentName", searchParam.DepartmentName)
                    .OrderByPath("AuthorityMaster.UpdateDate", isDisc: true),
                x => new AuthorityDataGetDTO
                {
                    UserId = x.AuthorityMaster.UserId,
                    AuthorityName = x.AuthorityMaster.AuthorityName,
                    AuthorityFlg = x.AuthorityMaster.AuthorityFlg,
                    UpdateDate = x.AuthorityMaster.UpdateDate,
                    Updater = x.AuthorityMaster.Updater,
                    DelFlg = x.AuthorityMaster.DelFlg,
                    UserFullName = x.User.UserFullName,
                    DepartmentName = x.Department.DepartmentName
                },
                pageNumber,
                pageSize,
                cancellationToken
            );
        }

        /// <summary>
        /// 権限データ取得(DTO)
        /// </summary>
        /// <param name="searchParam">検索条件DTO</param>
        /// <param name="cancellationToken">キャンセルトークン</param>
        /// <returns></returns>
        public async Task<List<AuthorityDataGetDTO>> GetAuthorityDatasAsync(AuthorityDataSearchParam searchParam, CancellationToken cancellationToken = default)
        {
            return await GetAuthorityDatasAsync(searchParam.UserId, searchParam.UserFullName, searchParam.DepartmentName, cancellationToken);
        }

        /// <summary>
        /// 権限データ取得
        /// </summary>
        /// <param name="userId">ユーザーID</param>
        /// <param name="userFullName">ユーザー名</param>
        /// <param name="departmentName">部署名</param>
        /// <param name="cancellationToken">キャンセルトークン</param>
        /// <returns></returns>
        public async Task<List<AuthorityDataGetDTO>> GetAuthorityDatasAsync(string? userId, string? userFullName, string? departmentName, CancellationToken cancellationToken = default)
        {
            return await QueryAsync(
                queryBuilder => queryBuilder
                .JoinAny<UserMasterModel>("UserId", "UserId")
                .JoinAny<DepartmentMasterModel>("User.DepartmentCode", "DepartmentCode")
                .WhereIf(userId.IsNotNullOrEnptyOrWhiteSpace(), "AuthorityMaster.UserId", userId)
                .WhereIf(userFullName.IsNotNullOrEnptyOrWhiteSpace(), "User.UserFullName", userFullName)
                .WhereIf(departmentName.IsNotNullOrEnptyOrWhiteSpace(), "Department.DepartmentName", departmentName),
                x => new AuthorityDataGetDTO
                {
                    UserId = x.AuthorityMaster.UserId,
                    AuthorityName = x.AuthorityMaster.AuthorityName,
                    AuthorityFlg = x.AuthorityMaster.AuthorityFlg,
                    UpdateDate = x.AuthorityMaster.UpdateDate,
                    Updater = x.AuthorityMaster.Updater,
                    DelFlg = x.AuthorityMaster.DelFlg,
                    UserFullName = x.User.UserFullName,
                    DepartmentName = x.Department.DepartmentName
                },
                cancellationToken
                );
        }
    }
}
